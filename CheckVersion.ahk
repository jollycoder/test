 #NoTrayIcon
#SingleInstance Force

CreateUpdater()

CreateUpdater() {
   local
   base64 := GetBase64()
   size := CryptStringToBinary(base64, data)
   if !InStr(FileExist(A_AppData . "\Updater"), "D")
      FileCreateDir, % A_AppData . "\Updater"
   filePath := A_AppData . "\Updater\Updater.ahk"
   if !FileExist(filePath) || CompareData(filePath, data, size) {
      File := FileOpen(filePath, "w")
      File.Pos := 0
      File.RawWrite(data, size)
      File := ""
   }
   Run, % filePath
}

CryptStringToBinary(string, ByRef outData, formatName := "CRYPT_STRING_BASE64")
{
   local
   static formats := { CRYPT_STRING_BASE64: 0x1
                     , CRYPT_STRING_HEX:    0x4
                     , CRYPT_STRING_HEXRAW: 0xC }
   fmt := formats[formatName]
   chars := StrLen(string)
   if !DllCall("Crypt32\CryptStringToBinary", "Str", string, "UInt", chars, "UInt", fmt
                                            , "Ptr", 0, "UIntP", bytes, "Ptr", 0, "Ptr", 0)
      throw "CryptStringToBinary failed. LastError: " . A_LastError
   VarSetCapacity(outData, bytes)
   DllCall("Crypt32\CryptStringToBinary", "Str", string, "UInt", chars, "UInt", fmt
                                        , "Str", outData, "UIntP", bytes, "Ptr", 0, "Ptr", 0)
   Return bytes
}

CompareData(filePath, ByRef data, len) {
   local
   fileLen := GetFileData(filePath, fileData)
   if (fileLen != len)
      Return true
   hLib := DllCall("LoadLibrary", "Str", "Bcrypt.dll", "Ptr")
   fileHashLen := CreateHash(&fileData, fileLen, fileHashData)
   dataHashLen := CreateHash(&data, len, hashData)
   DllCall("FreeLibrary", "Ptr", hLib)
   Return DllCall("msvcrt\memcmp", "Ptr", &fileHashData, "Ptr", &hashData, "Ptr", dataHashLen)
}

GetFileData(filePath, ByRef data) {
   local
   File := FileOpen(filePath, "r")
   File.Pos := 0
   File.RawRead(data, len := File.Length)
   File := ""
   Return len
}

CreateHash(pData, size, ByRef hashData, pSecretKey := 0, keySize := 0, AlgId := "SHA256") {
   ; CNG Algorithm Identifiers
   ; https://docs.microsoft.com/en-us/windows/win32/seccng/cng-algorithm-identifiers
   local
   static HMAC := BCRYPT_ALG_HANDLE_HMAC_FLAG := 0x00000008
   DllCall("Bcrypt\BCryptOpenAlgorithmProvider", "PtrP", hAlgorithm, "WStr",  AlgId, "Ptr", 0, "UInt", keySize ? HMAC : 0)
   DllCall("Bcrypt\BCryptCreateHash", "Ptr", hAlgorithm, "PtrP", hHash, "Ptr", 0, "UInt", 0, "Ptr", pSecretKey, "UInt", keySize, "UInt", 0)
   DllCall("Bcrypt\BCryptHashData", "Ptr", hHash, "Ptr", pData, "UInt", size, "UInt", 0)
   DllCall("Bcrypt\BCryptGetProperty", "Ptr", hAlgorithm, "WStr", "HashDigestLength", "UIntP", hashLen, "UInt", 4, "UIntP", cbResult, "UInt", 0)
   VarSetCapacity(hashData, hashLen, 0)
   DllCall("Bcrypt\BCryptFinishHash", "Ptr", hHash, "Ptr", &hashData, "UInt", hashLen, "UInt", 0)
   DllCall("Bcrypt\BCryptDestroyHash", "Ptr", hHash)
   DllCall("Bcrypt\BCryptCloseAlgorithmProvider", "Ptr", hAlgorithm, "UInt", 0)
   Return hashLen
}

GetBase64() {
local
base64 := ""
base64 .= "Z3MuSGlkZGVuIDo9IGZhbHNlDQoNCiAgIHRyaWdnZXJzIDo9IHRhc2tEZWZpbml0aW9uLlRyaWdnZXJzDQogICB0cmlnZ2VyIDo9IHRyaWdnZXJzLkNyZWF0ZShUQVNLX1RSSUdHRVJfREFJTFkpDQogICBpZiBpbnRlcnZhbEhvdXJzIHsNCiAgICAgIHJlcGV0aXRpb24gOj0gdHJpZ2dlci5SZXBldGl0aW9uDQogICAgICByZXBldGl0aW9uLkR1cmF0aW9uIDo9ICJQMUQiDQogICAgICByZXBldGl0aW9uLkludGVydmFsIDo9ICJQVCIgLiBpbnRlcnZhbEhvdXJzIC4gIkgiDQogICB9DQogICBzdGFydFRpbWUgOj0gIjIwMjIwNjE2IiAuIFN0clJlcGxhY2Uoc3RhcnRUaW1lLCAiOiIpIC4gIjAwIg0KICAgRm9ybWF0VGltZSwgc3RhcnRUaW1lLCAlIHN0YXJ0VGltZSwgeXl5eS1NTS1kZFRISDptbTpzcw0KICAgdHJpZ2dlci5TdGFydEJvdW5kYXJ5IDo9IHN0YXJ0VGltZQ0KICAgdHJpZ2dlci5JZCA6PSAiVGltZVRyaWdnZXJJZCINCiAgIHRyaWdnZXIuRW5hYmxlZCA6PSB0cnVlDQoNCiAgIGFjdGlvbiA6PSB0YXNrRGVmaW5pdGlvbi5BY3Rpb25zLkNyZWF0ZSggVEFTS19BQ1RJT05fRVhFQyApDQogICBhY3Rpb24uUGF0aCA6PSBmaWxlUGF0aA0KICAgKHNBcmdzICE9ICIiICYmIGFjdGlvbi5Bcmd1bWVudHMgOj0gc0FyZ3MpDQogICANCiAgIHRhc2sgOj0gcm9vdEZvbGRlci5SZWdpc3RlclRhc2tEZWZpbml0aW9uKHRhc2tOYW1lLCB0YXNrRGVmaW5pdGlvbiwgVEFTS19DUkVBVEVfT1JfVVBEQVRFLCwsIFRBU0tfTE9HT05fSU5URVJBQ1RJVkVfVE9LRU4pDQogICAoIHN0YXJ0SW1tZWRpYXRlbHkgJiYgdGFzay5SdW4oIiIpICkNCiAgIFJldHVybiB0cnVlDQp9"
Return base64
}
